<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="gv_8c" kind="file">
    <compoundname>gv.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="iks__ast_8h" local="yes">iks_ast.h</includes>
    <incdepgraph>
      <node id="103">
        <label>stdlib.h</label>
      </node>
      <node id="104">
        <label>iks_ast.h</label>
        <link refid="iks__ast_8h_source"/>
      </node>
      <node id="102">
        <label>stdio.h</label>
      </node>
      <node id="101">
        <label>/home/alexandre/Desktop/comp/compiladores/src/gv.c</label>
        <link refid="gv.c"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gv_8c_1aa065f30aa9f5f9a42132c82c787ee70b" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* fp</definition>
        <argsstring></argsstring>
        <name>fp</name>
        <initializer> NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gv.c</para><para>As funções deste arquivo, se corretamente utilizadas, permitem a geração de um grafo no formato dot (graphviz). Ele imprime na saída de erro do programa o grafo. Para utilizar, chame gv_init no início do programa, depois chame gv_declare para declarar um nó da AST (passando o seu tipo - de acordo com ast.h, o pointeiro para o nó da AST e o seu nome). Para conectar dois nós da AST, utilize gv_connect e para fechar o arquivo utilize gv_close.</para><para>Atenção: não altere este arquivo</para><para>Supondo que o arquivo de saída deste módulo encontra-se no arquivo &quot;saida.dot&quot;, ele pode ser visualizado da seguinte maneira:</para><para>1 - instale o pacote graphviz 2 - execute o comando &quot;dot saida.dot -Tpng -o saida.png&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="24" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gv_8c_1a26aeea8feb6b1a02a83abedf550e2801" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __gv_test_valid_fp</definition>
        <argsstring>(const char *function_name)</argsstring>
        <name>__gv_test_valid_fp</name>
        <param>
          <type>const char *</type>
          <declname>function_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="27" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a16d2aa6e8295d55d88670743d15e786b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __gv_test_valid_ast_pointer</definition>
        <argsstring>(const char *function_name, const char *pointer)</argsstring>
        <name>__gv_test_valid_ast_pointer</name>
        <param>
          <type>const char *</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="35" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a08379613c089458fa5fb304254014d1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char* __gv_description_from_type</definition>
        <argsstring>(int tipo)</argsstring>
        <name>__gv_description_from_type</name>
        <param>
          <type>int</type>
          <declname>tipo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="43" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="42" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a93b2805bfe8f8a6367330ffc72b0b2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gv_init</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>gv_init</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gv_init</para><para>Esta função deve ser chamada para inicializar o arquivo onde o grafo será registrado. Um nome de arquivo, opcional, pode ser passado como argumento para esta função. Caso o parâmetro com o nome do arquivo seja NULL, a saída será impressa na saída de erro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="88" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="87" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a968b05ac409ae707c0a23eadaf73cf3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gv_close</definition>
        <argsstring>(void)</argsstring>
        <name>gv_close</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gv_close</para><para>Esta função deve ser chamada para fechar o arquivo com o grafo registrado. Ela deve ser chamada no final do compilador. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="116" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a7b8c439347a2c3b842aa84ddcd35846e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gv_declare</definition>
        <argsstring>(const int tipo, const void *pointer, char *name)</argsstring>
        <name>gv_declare</name>
        <param>
          <type>const int</type>
          <declname>tipo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gv_declare</para><para>Esta função deve ser chamada para declarar um nó da AST, registrando esse novo nó no arquivo. Ela tem três parâmetros:</para><para>1/ tipo, que deve ser obrigatoriamente um dos valores das constantes declaradas no arquivo <ref refid="iks__ast_8h_source" kindref="compound">iks_ast.h</ref>;</para><para>2/ pointer, que deve ser um pointeiro para o nó da árvore AST que está sendo declarado servindo a partir de agora como identificador único do nó; e</para><para>3/ name, que deve ser um lexema válido somente se o tipo for um desses três valores: IKS_AST_IDENTIFICADOR (o lexema do identificador), IKS_AST_LITERAL (o lexema do literal) ou IKS_AST_FUNCAO (o lexema do identificador da função). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="141" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="140" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="gv_8c_1a620f493bc6bec666fe0efbeddd59d13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gv_connect</definition>
        <argsstring>(const void *p1, const void *p2)</argsstring>
        <name>gv_connect</name>
        <param>
          <type>const void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gv_connect</para><para>Esta função deve ser utilizada para conectar dois nós da AST na saída em dot. Ela recebe como parâmetro ponteiros para os dois nós da AST que devem ser conectados. Note que esses ponteiros servem como identificadores únicos dos nós da AST. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c" line="207" bodyfile="/home/alexandre/Desktop/comp/compiladores/src/gv.c" bodystart="206" bodyend="213"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="20"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iks_ast.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*fp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__gv_test_valid_fp<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function_name)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>foi<sp/>chamada,<sp/>mas<sp/>gv_init<sp/>não<sp/>foi<sp/>chamada<sp/>antes,<sp/>abort()\n&quot;</highlight><highlight class="normal">,<sp/>function_name);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__gv_test_valid_ast_pointer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pointer)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pointer){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>foi<sp/>chamada<sp/>com<sp/>pointer<sp/>=<sp/>NULL\n&quot;</highlight><highlight class="normal">,<sp/>function_name);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__gv_description_from_type<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tipo)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tipo){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_PROGRAMA:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;programa&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_IF_ELSE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ifelse&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_DO_WHILE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dowhile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_WHILE_DO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;whiledo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_INPUT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_OUTPUT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ATRIBUICAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_RETURN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_BLOCO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_SOMA:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_SUBTRACAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_MULTIPLICACAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_DIVISAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_INVERSAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_E:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&amp;&amp;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_OU:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;||&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_DIF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_IGUAL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;==&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_LE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_GE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_L:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_G:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_NEGACAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_VETOR_INDEXADO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_CHAMADA_DE_FUNCAO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;call&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>tipo<sp/>provided<sp/>is<sp/>invalid<sp/>here\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>should<sp/>not<sp/>get<sp/>here\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gv_init<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//verificar<sp/>se<sp/>gv_init<sp/>já<sp/>foi<sp/>chamada</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:%d<sp/>já<sp/>foi<sp/>chamada,<sp/>abort()\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//se<sp/>o<sp/>nome<sp/>do<sp/>arquivo<sp/>for<sp/>válido,<sp/>abre<sp/>arquivo<sp/>com<sp/>esse<sp/>nome<sp/>para<sp/>escrita</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen<sp/>(filename,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:%d<sp/>não<sp/>conseguiu<sp/>abrir<sp/>o<sp/>arquivo<sp/>%s<sp/>para<sp/>escrita\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>__LINE__,<sp/>filename);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>stderr;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>fprintf<sp/>(fp,<sp/></highlight><highlight class="stringliteral">&quot;digraph<sp/>G<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gv_close<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>__gv_test_valid_fp<sp/>(__FUNCTION__);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>fprintf<sp/>(fp,<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gv_declare<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tipo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pointer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>__gv_test_valid_fp<sp/>(__FUNCTION__);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>__gv_test_valid_ast_pointer<sp/>(__FUNCTION__,<sp/>pointer);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tipo){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_FUNCAO:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_IDENTIFICADOR:<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LITERAL:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>name<sp/>should<sp/>be<sp/>not<sp/>NULL\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>description<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_PROGRAMA:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_IF_ELSE:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_DO_WHILE:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_WHILE_DO:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_INPUT:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_OUTPUT:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ATRIBUICAO:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_RETURN:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_BLOCO:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_SOMA:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_SUBTRACAO:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_MULTIPLICACAO:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_DIVISAO:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_ARIM_INVERSAO:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_E:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_OU:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_DIF:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_IGUAL:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_LE:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_GE:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_L:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_G:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_LOGICO_COMP_NEGACAO:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_VETOR_INDEXADO:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IKS_AST_CHAMADA_DE_FUNCAO:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>name<sp/>should<sp/>be<sp/>NULL\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>description<sp/>=<sp/>__gv_description_from_type<sp/>(tipo);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>unknow<sp/>tipo<sp/>provided\n&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>fprintf<sp/>(fp,<sp/></highlight><highlight class="stringliteral">&quot;node_%p<sp/>[label=\&quot;%s\&quot;]\n&quot;</highlight><highlight class="normal">,<sp/>pointer,<sp/>description);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gv_connect<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>__gv_test_valid_fp<sp/>(__FUNCTION__);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>__gv_test_valid_ast_pointer<sp/>(__FUNCTION__,<sp/>p1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>__gv_test_valid_ast_pointer<sp/>(__FUNCTION__,<sp/>p2);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;node_%p<sp/>-&gt;<sp/>node_%p\n&quot;</highlight><highlight class="normal">,<sp/>p1,<sp/>p2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/alexandre/Desktop/comp/compiladores/src/gv.c"/>
  </compounddef>
</doxygen>
